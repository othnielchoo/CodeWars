/*  
the idea is that all numbers are divisible by any numbers is not a prime number.
and since a number's multiplication table will be no more then (num / 2), 
we loop the numbers from 2 to num / 2 then modular it. 
if the result of the modular is 0, means the number is not prime.
no point start from 1 because any number % 1 is 0
- e.g 1
    for the number 4
    1 x 4
    2 x 2
- e.g 2
    for the number 20
    1 x 20
    2 x 10
    4 x 5
    
  lets take 6 (not a prime number case)
  loop 1
  i = 2, i <= 3
  6 % 2 = 0 thus not a prime number
 
 lets take 11 ( a prime number case)
  loop 1
  i = 2, i <= 5
  11 % 2 = 1
  loop 2 
  i = 3, i <= 5
  11 % 3 = 2
  loop 3
  i = 4, i <= 5
  11 % 4 = 3
  loop 4
  i = 5, i <= 5
  11 % 5 = 1
  loop method is not fast enough
*/
//bool isPrime(int num) {
//  // quick return as numbers 1 and below is not a prime
//  if ( num <= 1)
//      return false;
//      
//  bool isPrime = true;
//  int half = num / 2;
//  int start = 2;
//  for (int i = 2; (i <= half) && isPrime; ++i) {
//      if (num % i == 0) {
//         isPrime = false;
//      }
//   }
//   
//   return isPrime;
//}

// sieve method - takes too long also
/* http://mathforum.org/dr.math/faq/faq.prime.num.html#:~:text=When%20a%20number%20has%20more,%2C%20197%2C%20199%2C%20etc.
  Cross out 1, because it is not prime.
  
  Circle 2, because it is the smallest positive even prime. Now cross out every multiple of 2; in other words, cross out every second number.
  
  Circle 3, the next prime. Then cross out all of the multiples of 3; in other words, every third number. Some, like 6, may have already been crossed out because they are multiples of 2.
  
  Circle the next open number, 5. Now cross out all of the multiples of 5, or every 5th number.
*/
//bool isPrime(int num) {
//  // quick return as numbers 1 and below is not a prime
//  if ( num <= 1)
//    return false;
//      
//  /* Initialization , if primes[i]=1 it means
//     i is prime and if 0 it means i is composite,
//     initially assume all are prime */
//  std::vector<bool> primes(num + 1, true); 
//  int i = 2;
//  int start = i;
//  int startSqr = start * start;
//      
//  /*Seives method*/
//  while(start * start <= num) {
//    // since 2 is a prime, for every number that is a multiple of 2, cross it out.
//    // so on and so forth for the next loop
//    for(i = start * start; i <= num; i += start)
//      primes[i] = false;
//    
//    //find the next number that is a prime
//    for(i = start+1; i <= num; ++i) {
//       if(primes[i])
//          break;
//    }
//    
//    start=i;
//    startSqr = start * start;
//  }
//   
//   return primes[num];
//}

/* using recursion
// the base cases of eliminates anything less then 2
next we check for n % i
if n % i is 0 means i is a factor and n is not a prime
then if i square is more then n, means n is a prime and has no factor other then itself

the idea is that we go through each number starting from 2 to see if they are a factor of n.
but the upper bound is that the square of the current i is not more then n because 
any number after that will cover the numbers that has prime numbers as factors.
 
e.g 1
- n = 9, i = 2
  9 % 2 = 1
  2 * 2 = 4 ( not more then 9)
- n = 9, i = 3
  9 % 3 = 0 ( not a prime)

e.g 2
- n = 37, i = 2
  37 % 2 = 1
  2 * 2 = 4 (not more then 37)
- n = 37, i = 3
  37 % 3 = 1
  3 * 3 = 9 (not more then 37)
- n = 37, i = 4
  37 % 4 = 1
  4 * 4 = 16 ( not more then 37)
- n = 37, i = 5
  37 % 5 = 2 
  5 * 5 = 25 ( not more then 37)
- n = 37, i = 6
  37 % 6 = 1 
  6 * 6 = 36 ( not more then 37)
- n = 37, i = 7
  37 % 7 = 1 
  7 * 7 = 49 ( more then 37)

*/
//if cases causes branching though...
bool isPrimeRecurse(int n, int i = 2) {
    // Base cases  
    if (n <= 2) 
        return (n == 2) ? true : false; 
    if (n % i == 0) 
        return false; 
    if (i * i > n) 
        return true; 
  
    // Check for next divisor 
    return isPrime(n, i + 1); 
}

/* best solutions */
/*
bool isPrime(int num) {
  if (num < 2) return false;
  int x = sqrt(num); // although sqrt is expensive 
  for (int i = 2; i <= x; i++) if (num % i == 0) return false;
  return true;
}
bool isPrime(int num) {
  for(int i = 2; i <= sqrt(num); i++) if(num % i == 0) return false;
  return num <= 1? false : true;
}
*/
